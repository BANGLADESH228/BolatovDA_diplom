#!/bin/bash

REPO1="https://formulae.brew.sh/api/cask/yandex-cloud-cli.json"
REPO2="https://storage.yandexcloud.net/yandexcloud-yc/install.sh"

NAME1=yc
LINUX=checkLinux

usage() {
  cat <<EOF

Usage: 
    $(basename "${BASH_SOURCE[0]}") [-h] [-c] value1 [-t] value2

Available options:
    -h, --help      Print this help and exit
    -t, --template  Path to the template with the list of tools that will be installed
    -c, --config    Path to the configuration file main.tf
EOF
  exit
}

ifUsingHelp() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        usage
        exit 0
    fi
 }

checkVersion() {
    if [ $NAME1 != "terraform" ]; then
        $NAME1 version | awk '{print $4}'
    else
        $NAME1 version | awk '{print $2}' | head -1
    fi
}

checkLatestVersion() {
    if [ $NAME1 != "terraform" ]; then
         curl -sSL $REPO1 | jq -r ".version"
    else
         curl -sSL $REPO1 | jq -r ".tag_name"
    fi
}

delimitationLine() {
    echo ""
    echo "-----------------------------------------------------------------------------------------------------------" 
    echo ""
}

isInstalled() {
    echo "Checking if the "$NAME1 "is installed..."
    if [ $(command -v $NAME1) ]; then
        echo "The programm "$NAME1" is allready installed"
    else
        echo "Error: "$NAME1" is not installed."
        delimitationLine
        installProgram
    fi
    delimitationLine
}

checkCurrentVersion() {
    v1=$(checkVersion)
    v2=$(checkLatestVersion)

    echo -n "Checking the current version of the "$NAME1": "
    checkVersion
    delimitationLine
    echo -n "Checking the latest version of the "$NAME1": "
    checkLatestVersion
    delimitationLine

    if [ v1 == v2  ]; then
        echo "The latest version of the "$NAME1 "is allready installed."
	checkVersion
    else
        echo "Need to update "$NAME"to the latest version" $v2
        delimitationLine
        installProgram
    fi
    delimitationLine
}

isTerraform() {
    if [ $NAME1 != "terraform"  ]; then
	 curl -sSL $REPO2 | bash
	 echo ""
	 echo "Starting new shell..."
    else 
        isKali
    fi
}

isKali() {
    if [ $LINUX  != "Kali GNU/Linux" ]; then
        installTerraform1
    else
        installTerraform2
    fi
}

installProgram() {
    echo "Installing "$NAME1"..."
    echo ""
    isTerraform
}

installTerraform1() {
    sudo apt install -y gnupg software-properties-common curl
    curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
    sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
    echo "Need to make update your system..."
    delimitationLine
    updateSystem
    sudo apt-get install terraform
    echo ""
    if [ $(command -v $NAME1 ) ]; then
        echo "The program "$NAME1" installed correctly."
    else
        installTerraform2
    fi
    delimitationLine
}

installTerraform2() {
    concatVersion
    getUrl
    getFile
    wget -O $(getFile) $(getUrl)
    sudo unzip $(getFile) -d /usr/local/bin
}

concatVersion() {
    v=$(checkLatestVersion)
    file="${v:1}" 
    echo $file
}

getUrl() {
    version=$(concatVersion)
    url="https://releases.hashicorp.com/terraform/"
    file_name1="/terraform_"
    file_name2="_linux_amd64.zip"
    file_url="${url}${file}${file_name1}${version}${file_name2}"
    echo $file_url
}

getFile() {
    version=$(concatVersion)
    file_name1="terraform_"
    file_name2="_linux_amd64.zip"
    file_version="${file_name1}${version}${file_name2}"
    echo $file_version
}

optionSelection() {
    read -p "Do you want to proceed? (yes/no) " yn 

    case $yn in
        yes ) echo ok, we will proceed;;
        no ) echo exiting...;
	    exit 0;;
        * ) echo invalid response;
            exit 1;;
    esac
}

updateSystem() {
    echo "Updating your system:"
    sudo apt-get update
    delimitationLine
}

checkLinux() {
    if [ -f /etc/*release* ]; then
        . /etc/*release*
        echo $NAME
    else
        echo "File /etc/*release* not found!"
    fi
}

checkLinux

ifUsingHelp $1
isInstalled
checkCurrentVersion

NAME1=terraform
REPO1="https://api.github.com/repos/hashicorp/terraform/releases/latest"

isInstalled
checkCurrentVersion
