#!/bin/bash

REPO1="https://formulae.brew.sh/api/cask/yandex-cloud-cli.json"
REPO2="https://storage.yandexcloud.net/yandexcloud-yc/install.sh"

NAME1=jq
LINUX=check_linux
config_file=""

#-----------------------------------------------------------------------------------------------------------

# Recording to a log file

logger() {
    log_file="./script.log"
    > "$log_file"
    exec > >(tee -a "$log_file") 2>&1
}

#-----------------------------------------------------------------------------------------------------------

# Checking arguments and OC

check_args() {
    while getopts "c:h" opt; do
        case $opt in
            c) config_file=$OPTARG ;;
            h) usage ;;
            \?) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
        esac
    done
}

check_for_arg() {
    if [ -z "$config_file" ]; then
        echo "Argument referring to the user configuration file isn't passed!"
        echo "Therefore, a standard configuration file will be used."
    else
        echo "A custom configuration file will be used: $config_file"
        echo "Attention check the file for errors!"
        replace_variables_tf "$config_file"
    fi
    delimitation_line
}

replace_variables_tf() {
    delimitation_line

    if [ -f "$config_file" ]; then
        cp "$config_file" variables.tf
        echo "The $config_file file has been successfully replaced."
    else
        echo "The specified $config_file file doesn't exist."
    fi
}

check_linux() {
    echo -n "Checking the installed operating system: "

    if [ -f /etc/*release* ]; then
        . /etc/*release*
        echo $NAME
    else
        echo "File /etc/*release* not found!"
    fi
    delimitation_line
}

#-----------------------------------------------------------------------------------------------------------

# Programme installation

check_program_installation() {
    echo "Checking if the "$NAME1 "is installed..."
    if [ $(command -v $NAME1) ]; then
        echo "The programm "$NAME1" is allready installed"
    else
        echo "Error: "$NAME1" is not installed."
        delimitation_line
        installation_preparation
    fi
    delimitation_line
}

installation_preparation() {
    echo "Installing "$NAME1"..."
    delimitation_line
    terraform_check
}

#-----------------------------------------------------------------------------------------------------------

# Checking the versions

check_version() {
    if [ $NAME1 != "terraform" ]; then
        $NAME1 version | awk '{print $4}'
    else
        $NAME1 version | awk '{print $2}' | head -1
    fi
}

check_latest_version() {
    if [ $NAME1 != "terraform" ]; then
         curl -sSL $REPO1 | jq -r ".version"
    else
         curl -sSL $REPO1 | jq -r ".tag_name"
    fi
}

check_current_version() {
    v1=$(check_version)
    v2=$(check_latest_version)

    if [ $NAME1 == "yc" ]; then
        v2=$(echo "$v2" | awk -F. -v OFS=. '{ $2++; print }')
    else
        :
    fi

    echo -n "Checking the current version of the "$NAME1": "
    check_version
    delimitation_line
    echo -n "Checking the latest version of the "$NAME1": "
    check_latest_version
    delimitation_line

    if [ $v1 == $v2 ]; then
        echo -n "The latest version of the "$NAME1 "is allready installed: "
	check_version
    else
        echo "Need to update "$NAME1 "to the latest version" $v2
        delimitation_line
        installation_preparation
    fi
    delimitation_line
}

#-----------------------------------------------------------------------------------------------------------

# Checking installed programme: Jq

install_jq() {
    sudo apt-get install jq
    jq --version
}

#-----------------------------------------------------------------------------------------------------------

# Checking installed programme: terraform

terraform_check() {
    if [[ $NAME1 != "terraform" && $NAME1 != "jq" ]]; then
	    curl -sSL $REPO2 | bash
	    echo ""
	    echo "Starting new shell..."
    elif [ $NAME1 == "jq" ]; then
        install_jq
    else
        #kali_linux_check 
        echo "ITS OK"
    fi
}

install_terraform_1() {
    sudo apt install -y gnupg software-properties-common curl
    curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
    sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"

    echo "Need to make update your system..."
    delimitation_line
    update_system
    sudo apt-get install terraform
    echo ""

    if [ $(command -v $NAME1 ) ]; then
        echo "The program "$NAME1" installed correctly."
    else
        install_terraform_2
    fi
    delimitation_line
}

install_terraform_2() {
    concat_version
    get_url
    get_file
    wget -O $(get_file) $(get_url)
    sudo unzip $(get_file) -d /usr/local/bin
}

#-----------------------------------------------------------------------------------------------------------

# Setting up the Yandex CLI and service account

init_yandex_cli() {
    echo "Starting to init a CLI profile..."
    yc init
    delimitation_line

    echo "Checking your CLI settings:"
    delimitation_line
    yc config list 
    delimitation_line
}

service_account_check() {
    output=$(yc iam service-account list)

    if [[ $output == *"service-accounts"* ]]; then
        echo "Service account already available!"
        delimitation_line
        list_of_service_accounts
        delimitation_line
    else
        echo "Starting to create a service account..."
        delimitation_line
        create_service_account
    fi
}

create_service_account() {
    yc iam service-account create --name user1
    list_of_service_accounts
    delimitation_line

    echo "Creating an authorised key..."
    delimitation_line
    v1=$(get_service_account_id)
    v2=$(get_folder_name)
    yc iam key create \
        --service-account-id $v1 \
        --folder-name $v2 \
        --output key.json
    delimitation_line
 
    echo "Creating a CLI profile..."
    delimitation_line
    yc config profile create terraform-user
    delimitation_line
    set_profile_config
}

set_profile_config() {
    v1=$(get_cloud_id)
    v2=$(get_folder_id)

    echo "Setting the profile configuration..."

    yc config set service-account-key key.json
    yc config set cloud-id $v1
    yc config set folder-id $v2
    delimitation_line

    export YC_TOKEN=$(yc iam create-token)
    export YC_CLOUD_ID=$(yc config get cloud-id)
    export YC_FOLDER_ID=$(yc config get folder-id)
}

get_service_account_id() {
    yc iam service-account list | awk '{print $2}' | head -4 | tail -n 1
}

get_folder_name() {
    yc resource-manager folder list | awk '{print $4}' | head -4 | tail -n 1
}

get_cloud_id() {
    yc config list | awk '{print $2}' | head -2 | tail -n 1
}

get_folder_id() {
    yc config list | awk '{print $2}' | head -3 | tail -n 1
}

list_of_service_accounts() {
    yc iam service-account list
}

#-----------------------------------------------------------------------------------------------------------

# Creating an environment with Terraform

variables_to_variables_tf() {
    output=$(yc config list)

    awk -F': ' '/token/ {
        printf "variable \"token\" {\n"
        printf "  type        = string\n"
        printf "  description = \"Yandex Cloud Service Account Token\"\n"
        printf "  default     = \"%s\"\n", $2
        printf "}\n"
    }
    /cloud-id/ {
        printf "variable \"cloud_id\" {\n"
        printf "  type        = string\n"
        printf "  description = \"Yandex Cloud ID\"\n"
        printf "  default     = \"%s\"\n", $2
        printf "}\n"
    }
    /folder-id/ {
        printf "variable \"folder_id\" {\n"
        printf "  type        = string\n"
        printf "  description = \"Yandex Cloud Folder ID\"\n"
        printf "  default     = \"%s\"\n", $2
        printf "}\n"
    }
    /zone/ {
        printf "variable \"zone\" {\n"
        printf "  type        = string\n"
        printf "  description = \"Default Zone for Yandex Cloud Compute Resources\"\n"
        printf "  default     = \"%s\"\n", $2
        printf "}\n"
    }
    ' <<< "$output" > variables.tf
}


start_terraform() {
    terraform_init
    terraform_plan
    terraform_apply
}

terraform_init() {
    echo "Terraform initialisation begins: "
    terraform init
    delimitation_line
}

terraform_plan() {
    echo "Terraform planning check: "
    delimitation_line
    terraform plan
    delimitation_line
}

terraform_apply() {
    echo "Confirm the settings: "
    delimitation_line
    terraform apply
    delimitation_line
}

terraform_destroy() {
    echo "Removing the environment: "
    delimitation_line
    terraform destroy
    delimitation_line
}

#-----------------------------------------------------------------------------------------------------------

# help command

usage() {
  cat <<EOF
Usage: 
    $(basename "${BASH_SOURCE[0]}") [-h] [-c] value1 [-t] value2

Available options:
    -h, --help      Print this help and exit
    -t, --template  Path to the template with the list of tools that will be installed
    -c, --config    Path to the configuration file main.tf
EOF
    delimitation_line
  exit
}

#-----------------------------------------------------------------------------------------------------------

# Additional functions for version detection

concat_version() {
    v=$(check_latest_version)
    file="${v:1}" 
    echo $file
}

get_url() {
    version=$(concat_version)
    url="https://releases.hashicorp.com/terraform/"
    file_name1="/terraform_"
    file_name2="_linux_amd64.zip"
    file_url="${url}${file}${file_name1}${version}${file_name2}"
    echo $file_url
}

get_file() {
    version=$(concat_version)
    file_name1="terraform_"
    file_name2="_linux_amd64.zip"
    file_version="${file_name1}${version}${file_name2}"
    echo $file_version
}

#-----------------------------------------------------------------------------------------------------------

# Additional functions for system updates and checks

option_selection() {
    read -p "Do you want to proceed? (yes/no) " yn 

    case $yn in
        yes ) echo ok, we will proceed;;
        no ) echo exiting...;
	    exit 0;;
        * ) echo invalid response;
            exit 1;;
    esac
}

delimitation_line() {
    echo ""
    echo "-----------------------------------------------------------------------------------------------------------" 
    echo ""
}

update_system() {
    option_selection
    echo "Updating your system:"
    sudo apt-get update
    delimitation_line
}

kali_linux_check() {
    if [ $LINUX  != "Kali GNU/Linux" ]; then
        install_terraform_1
    else
        install_terraform_2
    fi
}

#-----------------------------------------------------------------------------------------------------------

delimitation_line

# Recording to a log file 
logger

# Checking arguments and OC
check_args $@
check_for_arg
check_linux

# Checking installed programme: Jq
check_program_installation

# Checking installed programme: yc
NAME1=yc
check_program_installation
check_current_version

# Checking installed programme: terraform
NAME1=terraform
REPO1="https://api.github.com/repos/hashicorp/terraform/releases/latest"
check_program_installation
check_current_version

# Setting up the Yandex CLI and service account
init_yandex_cli
service_account_check

# Creating an environment with Terraform
#variables_to_variables_tf
start_terraform
